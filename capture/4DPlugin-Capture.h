/* --------------------------------------------------------------------------------
 #
 #	4DPlugin-Capture.h
 #	source generated by 4D Plugin Wizard
 #	Project : Capture
 #	author : miyako
 #	2019/10/03
 #  
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_CAPTURE_H
#define PLUGIN_CAPTURE_H

#include "4DPluginAPI.h"
#include "4DPlugin-JSON.h"

#if VERSIONMAC
#import <AVFoundation/AVFoundation.h>
#import <Security/Security.h>
#import <CoreFoundation/CoreFoundation.h>
#import <Cocoa/Cocoa.h>
#import <QuartzCore/CALayer.h>

#ifndef errAEEventWouldRequireUserConsent
enum {
    errAEEventWouldRequireUserConsent     =     -1744
};
#endif

@interface CaptureMan : NSObject {
    
    AVCaptureSession *captureSession;
    AVCaptureDevice *videoDevice;
    AVCaptureDeviceInput *videoInput;
    AVCaptureVideoDataOutput *videoOutput;
    AVCaptureVideoPreviewLayer *previewLayer;

    CGRect previewLayerFrame;
    NSView *superLayerView;
    
    AVCaptureStillImageOutput *imageOutput;
    
    std::vector<unsigned char>buf;
    
    bool imageCaptured;
    bool isConfigured;
    
    NSNotificationCenter *notificationCenter;
}

- (void)onDeviceDisconnected:(NSNotification *)notification;
- (void)onDeviceConnected:(NSNotification *)notification;
- (void)onStopRunning:(NSNotification *)notification;
- (void)onStartRunning:(NSNotification *)notification;
- (void)onSessionRuntimeError:(NSNotification *)notification;
- (void)onSessionInterruptionEnded:(NSNotification *)notification;
- (void)onInterrupted:(NSNotification *)notification;

- (bool)isImageReady;
- (PA_Picture)copyImage;
- (void)captureImage;
- (void)startRunning;
- (void)stopRunning;
- (void)setPreviewLayerView:(NSView *)view frame:(NSRect)frame flipH:(bool)flipH flipV:(bool)flipV;
- (void)updatePreviewLayerFrame:(NSRect)frame flipH:(bool)flipH flipV:(bool)flipV hidden:(bool)hidden;
@end

#endif

#pragma mark -

void capture_Request_permisson(PA_PluginParameters params);
void capture_Start(PA_PluginParameters params);
void capture_Stop(PA_PluginParameters params);
void capture_Image(PA_PluginParameters params);
void capture_Update(PA_PluginParameters params);

#endif /* PLUGIN_CAPTURE_H */
